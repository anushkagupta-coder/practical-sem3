#include <iostream> 
using namespace std; 
class complex 
{int r,i; 
public: 
complex(); 
complex operator +(complex c2); 
complex operator-(complex c2); 
friend complex operator * (complex &c1,complex &c2); 
friend istream& operator >>(istream &in, complex &c1); 
friend ostream& operator <<(ostream &out,complex &c1 ); 
}; 
complex ::complex() 
{ r=0; 
i=0; 
} 
complex complex :: operator +(complex c2) 
{ complex c3; 
c3.r=r+c2.r; 
c3.i=i+c2.i; 
return c3; 
} 
complex complex ::operator-(complex c2) 
{complex c4; 
c4.r=r-c2.r; 
c4.i=i-c2.i; 
return c4; 
} 
complex operator * (complex &c1 , complex &c2) 
{complex c5; 
c5.r=c1.r*c2.r-c1.i*c2.i; 
c5.i=c1.r*c2.i+c1.i*c2.r; 
return c5; 
} 
istream& operator >>(istream &in, complex &c1) 
{in>>c1.r; 
in>>c1.i; 
return in; 
} 
ostream& operator <<(ostream &out, complex &c1) 
{out<<c1.r; 
out<<c1.i; 
return out; 
} 
int main() 
{ complex c1,c2,c3,c4,c5; 
while(1) 
{int n; 
cout<<"1. to add\n"<<"2.to subtract\n"<<"3.to multiply\n"<<"4. to exit\n"; 
cout<<"enter n"<<endl; 
cin>>n; 
switch(n) 
{ 
   case 1: 
   {cin>>c1; 
     cin>>c2; 
     c3=c1+c2; 
     cout<<c3; 
     break; 
   } 
   case 2: 
   { cin>>c1; 
   cin>>c2; 
   c3=c1-c2; 
   cout<<c3; 
     break; 
   } 
   case 3: 
   { cin>>c1; 
   cin>>c2; 
   c3=c1*c2; 
   cout<<c3; 
   break; 
   } 
   case 4: 
   { 
     exit(0); 
     break; 
   } 
} 
} 
} 
